syntax on
:set number
:set incsearch
autocmd VimEnter * NERDTree
autocmd BufEnter * NERDTreeMirror
noremap <C-p> <Up>
inoremap <C-n> <Down>
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-e> <End>
inoremap <C-a> <Home>
inoremap <C-h> <Backspace>
inoremap <C-d> <Del>
nnoremap <silent><C-e> :NERDTreeToggle<CR>
set timeoutlen=100
set list
set listchars=tab:^\ ,trail:-
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent

set nocompatible               " Be iMproved
filetype off                   " Required!

nnoremap <S-h> :tabprevious<CR>
nnoremap <S-l>   :tabnext<CR>
nnoremap <S-w>     :tabclose<CR>
nnoremap <C-t>     :tabnew<CR>

" netrwは常にtree view
let g:netrw_liststyle = 3
" CVSと.で始まるファイルは表示しない
let g:netrw_list_hide = 'CVS,\(^\|\s\s\)\zs\.\S\+'
" " 'v'でファイルを開くときは右側に開く。(デフォルトが左側なので入れ替え)
let g:netrw_altv = 1
" " 'o'でファイルを開くときは下側に開く。(デフォルトが上側なので入れ替え)
let g:netrw_alto = 1


if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
  endif

  call neobundle#begin(expand('~/.vim/bundle/'))
  NeoBundleFetch 'Shougo/neobundle.vim'
  NeoBundle 'kien/ctrlp.vim'
  NeoBundle 'Shougo/neocomplcache'
  NeoBundle 'flazz/vim-colorschemes'
  NeoBundle 'kchmck/vim-coffee-script'
  NeoBundle 'hiukkanen/vim-hamlc'
  NeoBundle 'tpope/vim-fugitive'
  NeoBundle 'scrooloose/nerdtree'
  NeoBundle 'pangloss/vim-javascript'
  NeoBundle 'mxw/vim-jsx'
  call neobundle#end()

  filetype plugin indent on     " Required!

  " Installation check.
  if neobundle#exists_not_installed_bundles()
    echomsg 'Not installed bundles : ' .
            \ string(neobundle#get_not_installed_bundle_names())
              echomsg 'Please execute ":NeoBundleInstall" command.'
                "finish
              endif


autocmd QuickFixCmdPost *grep* cwindow

au BufNewFile,BufRead *.coffee :set filetype=coffee
au BufNewFile,BufRead *.hamlc :set filetype=haml
au BufNewFile,BufRead *.jbuilder :set filetype=ruby
au BufNewFile,BufRead *.ru :set filetype=ruby
au BufNewFile,BufRead Vagrantfile :set filetype=ruby
au BufNewFile,BufRead *.pp :set filetype=ruby

let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" " Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" " Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
"
" " Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
        \ }

        " Plugin key-mappings.
        inoremap <expr><C-g>     neocomplcache#undo_completion()
        inoremap <expr><C-l>     neocomplcache#complete_common_string()

        " Recommended key-mappings.
        " <CR>: close popup and save indent.
        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function()
          return neocomplcache#smart_close_popup() . "\<CR>"
          endfunction
          " <TAB>: completion.
          inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
          " <C-h>, <BS>: close popup and delete backword char.
          inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
          inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
          inoremap <expr><C-y>  neocomplcache#close_popup()
          inoremap <expr><C-e>  neocomplcache#cancel_popup()

